%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Stata
scope: source.stata
file_extensions:
  - do
  - ado
  - mata
contexts:
  main:
    - include: ascii-regex-functions
    - include: unicode-regex-functions
    - include: functions
    - include: comments
    - include: constants
    - include: operators
    - include: macro-local
    - include: macro-global
    - include: string-compound
    - include: string-regular
    - include: builtin_variables
    - include: subsetting
    - include: macro-commands
    - include: builtin_variables
    - include: macro-local
    - include: macro-global
    - include: comments
    - scope: keyword.control.conditional.stata
      match: "\\b(if|else if|else)\\b"
    - captures:
        1: storage.type.scalar.stata
      match: "^\\s*(sca(lar|la|l)?(\\s+de(fine|fin|fi|f)?)?)\\s+(?!(drop|dir?|l(ist|is|i)?)\\s+)"
    - captures:
        1: keyword.control.flow.stata
        2: entity.name.type.class.stata
        3: keyword.control.flow.stata
      match: "\\b(foreach)\\s+([a-zA-Z0-9_]{1,31})\\s+(in|of var(list|lis|li|l)?|of new(list|lis|li|l)?|of
        num(list|lis|li|l)?)\\b"
    - match: "\\b(foreach)\\s+([a-zA-Z0-9_]{1,31})\\s+(of loc(al|a)?|of glo(bal|ba|b)?)\\b\\s*"
      captures:
        1: keyword.control.flow.stata
        2: entity.name.type.class.stata
        3: keyword.control.flow.stata
      push:
        - include: reserved_names
        - match: "[A-Za-z_][A-Za-z0-9_]{0,31}"
          scope: entity.name.type.class.stata
        - include: macro-local
        - include: macro-global
        - match: "(?=\\s*\\{)"
          pop: true

    - match: "\\b(forvalues|forvalue|forvalu|forval|forva|forv)\\s*"
      captures:
        1: keyword.control.flow.stata
      set:
      - include: reserved_names
      - match: "[A-Za-z_][A-Za-z0-9_]{0,31}"
        scope: entity.name.type.class.stata
      - include: macro-local
      - include: macro-global
      - match: "\\s*(=)"
        captures:
          1: keyword.operator.assignment.stata
        set:
          - include: constants
          - include: operators
          - include: macro-local
          - include: macro-global
          # - match:


    - match: \(
      set:
      - match: ";"
        set:
        - match: ";"
          set:
          - match: \)
            pop: true
          - match: ";"
            scope: invalid.illegal.stray-semi-colon
          - include: expr
        - match: \)
          pop: true
        - include: expr
      - match: \)
        pop: true
      - include: expr

    # - match: '\b(regexm)(\()([^,]+)(,)\s*(")([^"]+)("(')?)\s*(\))'
    - include: commands-other





  functions:
    - match: "\\b(spacebef|spaceaft)(\\()"
      captures:
        1: support.function.option.outreg.stata
        2: punctuation.definition.parameters.begin.stata
      set:
        - include: constants
        - match: "(\\{|\\})"
          scope: keyword.operator.brace.stata
        - match: "\\)"
          scope: punctuation.definition.parameters.end.stata
          pop: true
    - match: "\\b((abbrev|abs|acos|acosh|asin|asinh|atan|atan2|atanh|autocode|betaden|binomial|binomialp|binomialtail|binormalbofd|byteorder|c|cauchy|cauchyden|cauchytail|Cdhms|ceil|char|chi2|chi2den|chi2tail|Chms|cholesky|chop|clip|clock|Clock|cloglog|Cmdyhms|cofC|Cofc|cofd|Cofd|coleqnumb|collatorlocale|collatorversion|colnfreeparms|colnumb|colsof|comb|cond|corr|cos|cosh|daily|date|day|det|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|dhms|diag|diag0cnt|digamma|dofb|dofc|dofC|dofh|dofm|dofq|dofw|dofy|dow|doy|dunnettprob|e|el|epsdouble|epsfloat|exp|exponential|exponentialden|exponentialtail|F|Fden|fileexists|fileread|filereaderror|filewrite|float|floor|fmtwidth|Ftail|gammaden|gammap|gammaptail|get|hadamard|halfyear|halfyearly|hh|hhC|hms|hofd|hours|hypergeometric|hypergeometricp|I|ibeta|ibetatail|igaussian|igaussianden|igaussiantail|indexnot|inlist|inrange|int|inv|invbinomial|invbinomialtail|invcauchy|invcauchytail|invchi2|invchi2tail|invcloglog|invdunnettprob|invexponential|invexponentialtail|invF|invFtail|invgammap|invgammaptail|invibeta|invibetatail|invigaussian|invigaussiantail|invlaplace|invlaplacetail|invlogistic|invlogistictail|invlogit|invnbinomial|invnbinomialtail|invnchi2|invnchi2tail|invnF|invnFtail|invnibeta|invnormal|invnt|invnttail|invpoisson|invpoissontail|invsym|invt|invttail|invtukeyprob|invweibull|invweibullph|invweibullphtail|invweibulltail|irecode|issymmetric|itrim|J|laplace|laplaceden|laplacetail|length|ln|lncauchyden|lnfactorial|lngamma|lnigammaden|lnigaussianden|lniwishartden|lnlaplaceden|lnmvnormalden|lnnormal|lnnormalden|lnwishartden|log|log10|logistic|logisticden|logistictail|logit|lower|ltrim|matmissing|matrix|matuniform|max|maxbyte|maxdouble|maxfloat|maxint|maxlong|mdy|mdyhms|mi|min|minbyte|mindouble|minfloat|minint|minlong|minutes|missing|mm|mmC|mod|mofd|month|monthly|mreldif|msofhours|msofminutes|msofseconds|nbetaden|nbinomial|nbinomialp|nbinomialtail|nchi2|nchi2den|nchi2tail|nF|nFden|nFtail|nibeta|normal|normalden|npnchi2|npnF|npnt|nt|ntden|nttail|nullmat|plural|poisson|poissonp|poissontail|proper|qofd|quarter|quarterly|r|rbeta|rbinomial|rcauchy|rchi2|real|recode|regexs|reldif|replay|return|reverse|rexponential|rgamma|rhypergeometric|rigaussian|rlaplace|rlogistic|rnbinomial|rnormal|round|roweqnumb|rownfreeparms|rownumb|rowsof|rpoisson|rt|rtrim|runiform|runiformint|rweibull|rweibullph|s|scalar|seconds|sign|sin|sinh|smallestdouble|soundex|sqrt|ss|ssC|string|stritrim|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrpos|strrtrim|strtoname|strtrim|strupper|subinstr|subinword|substr|sum|sweep|t|tan|tanh|tc|tC|td|tden|th|tin|tm|tobytes|tq|trace|trigamma|trim|trunc|ttail|tukeyprob|tw|twithin|uchar|udstrlen|udsubstr|uisdigit|uisletter|upper|ustrcompare|ustrcompareex|ustrfix|ustrfrom|ustrinvalidcnt|ustrleft|ustrlen|ustrlower|ustrltrim|ustrnormalize|ustrpos|ustrregexs|ustrreverse|ustrright|ustrrpos|ustrrtrim|ustrsortkey|ustrsortkeyex|ustrtitle|ustrto|ustrtohex|ustrtoname|ustrtrim|ustrunescape|ustrupper|ustrword|ustrwordcount|usubinstr|usubstr|vec|vecdiag|week|weekly|weibull|weibullden|weibullph|weibullphden|weibullphtail|weibulltail|wofd|word|wordbreaklocale|wordcount|year|yearly|yh|ym|yofd|yq|yw)|([A-Za-z_][A-Za-z0-9_]{0,31}))(\\()"
      captures:
        2: support.function.builtin.stata
        3: support.function.custom.stata
        4: punctuation.definition.parameters.begin.stata
      set:
        - match: "(\\))"
          captures:
            1: punctuation.definition.parameters.end.stata
          pop: true
        - include: ascii-regex-functions
        - include: unicode-regex-functions
        - include: functions
        - include: subsetting
        - match: "[A-Za-z_][A-Za-z0-9_]{0,31}"
          scope: variable.parameter.function.stata
        - include: main
  builtin_types:
    - match: "\\b(byte|int|long|float|double|str[1-9]?[0-9]?[0-9]?[0-9]?|strL)\\b"
      scope: support.type.stata
  builtin_variables:
    - match: "\\b(_b|_coef|_cons|_n|_N|_rc|_se)\\b"
      scope: variable.object.stata
  commands-other:
    - match: "\\b(about|ac|acprplot|ado|adopath|adoupdate|alpha|ameans|an|ano|anov|anova|anova_terms|anovadef|aorder|ap|app|appe|appen|append|arch|arch_dr|arch_estat|arch_p|archlm|areg|areg_p|args|arima|arima_dr|arima_estat|arima_p|asmprobit|asmprobit_estat|asmprobit_lf|asmprobit_mfx__dlg|asmprobit_p|avplot|avplots|bcskew0|bgodfrey|binreg|bip0_lf|biplot|bipp_lf|bipr_lf|bipr_p|biprobit|bitest|bitesti|bitowt|blogit|bmemsize|boot|bootsamp|boxco_l|boxco_p|boxcox|boxcox_p|bprobit|br|break|brier|bro|brow|brows|browse|brr|brrstat|bs|bsampl_w|bsample|bsqreg|bstat|bstrap|ca|ca_estat|ca_p|cabiplot|camat|canon|canon_estat|canon_p|caprojection|cat|cc|cchart|cci|cd|censobs_table|centile|cf|char|chdir|checkdlgfiles|checkestimationsample|checkhlpfiles|checksum|chelp|ci|cii|cl|class|classutil|clear|cli|clis|clist|clog|clog_lf|clog_p|clogi|clogi_sw|clogit|clogit_lf|clogit_p|clogitp|clogl_sw|cloglog|clonevar|clslistarray|cluster|cluster_measures|cluster_stop|cluster_tree|cluster_tree_8|clustermat|cmdlog|cnr|cnre|cnreg|cnreg_p|cnreg_sw|cnsreg|codebook|collaps4|collapse|colormult_nb|colormult_nw|compare|compress|conf|confi|confir|confirm|conren|cons|const|constr|constra|constrai|constrain|constraint|contract|copy|copyright|copysource|cor|corc|corr|corr2data|corr_anti|corr_kmo|corr_smc|corre|correl|correla|correlat|correlate|corrgram|cou|coun|count|cprplot|crc|cret|cretu|cretur|creturn|cross|cs|cscript|cscript_log|csi|ct|ct_is|ctset|ctst_st|cttost|cumsp|cumul|cusum|cutil|d|datasig|datasign|datasigna|datasignat|datasignatu|datasignatur|datasignature|datetof|db|dbeta|de|dec|deco|decod|decode|deff|des|desc|descr|descri|describ|describe|dfbeta|dfgls|dfuller|di|di_g|dir|dirstats|dis|discard|disp|disp_res|disp_s|displ|displa|display|do|doe|doed|doedi|doedit|dotplot|dprobit|drawnorm|ds|ds_util|dstdize|duplicates|durbina|dwstat|dydx|ed|edi|edit|eivreg|emdef|en|enc|enco|encod|encode|eq|erase|ereg|ereg_lf|ereg_p|ereg_sw|ereghet|ereghet_glf|ereghet_glf_sh|ereghet_gp|ereghet_ilf|ereghet_ilf_sh|ereghet_ip|eret|eretu|eretur|ereturn|err|erro|error|est|est_cfexist|est_cfname|est_clickable|est_expand|est_hold|est_table|est_unhold|est_unholdok|estat|estat_default|estat_summ|estat_vce_only|esti|estimates|etodow|etof|etomdy|expand|expandcl|fac|fact|facto|factor|factor_estat|factor_p|factor_pca_rotated|factor_rotate|factormat|fcast|fcast_compute|fcast_graph|fdades|fdadesc|fdadescr|fdadescri|fdadescrib|fdadescribe|fdasav|fdasave|fdause|fh_st|file|filefilter|fillin|find_hlp_file|findfile|findit|fit|fl|fli|flis|flist|fpredict|frac_adj|frac_chk|frac_cox|frac_ddp|frac_dis|frac_dv|frac_in|frac_mun|frac_pp|frac_pq|frac_pv|frac_wgt|frac_xo|fracgen|fracplot|fracpoly|fracpred|fron_ex|fron_hn|fron_p|fron_tn|fron_tn2|frontier|ftodate|ftoe|ftomdy|ftowdate|g|gamhet_glf|gamhet_gp|gamhet_ilf|gamhet_ip|gamma|gamma_d2|gamma_p|gamma_sw|gammahet|gdi_hexagon|gdi_spokes|genrank|genstd|genvmean|gettoken|gladder|glim_l01|glim_l02|glim_l03|glim_l04|glim_l05|glim_l06|glim_l07|glim_l08|glim_l09|glim_l10|glim_l11|glim_l12|glim_lf|glim_mu|glim_nw1|glim_nw2|glim_nw3|glim_p|glim_v1|glim_v2|glim_v3|glim_v4|glim_v5|glim_v6|glim_v7|glm|glm_p|glm_sw|glmpred|glogit|glogit_p|gmeans|gnbre_lf|gnbreg|gnbreg_p|gomp_lf|gompe_sw|gomper_p|gompertz|gompertzhet|gomphet_glf|gomphet_glf_sh|gomphet_gp|gomphet_ilf|gomphet_ilf_sh|gomphet_ip|gphdot|gphpen|gphprint|gprefs|gprobi_p|gprobit|gr|gr7|gr_copy|gr_current|gr_db|gr_describe|gr_dir|gr_draw|gr_draw_replay|gr_drop|gr_edit|gr_editviewopts|gr_example|gr_example2|gr_export|gr_print|gr_qscheme|gr_query|gr_read|gr_rename|gr_replay|gr_save|gr_set|gr_setscheme|gr_table|gr_undo|gr_use|graph|grebar|greigen|grmeanby|gs_fileinfo|gs_filetype|gs_graphinfo|gs_stat|gsort|gwood|h|hareg|hausman|haver|he|heck_d2|heckma_p|heckman|heckp_lf|heckpr_p|heckprob|hel|help|hereg|hetpr_lf|hetpr_p|hetprob|hettest|hexdump|hilite|hist|histogram|hlogit|hlu|hmeans|hotel|hotelling|hprobit|hreg|hsearch|icd9|icd9_ff|icd9p|iis|impute|imtest|inbase|include|inf|infi|infil|infile|infix|inp|inpu|input|ins|insheet|insp|inspe|inspec|inspect|integ|inten|intreg|intreg_p|intrg2_ll|intrg_ll|intrg_ll2|ipolate|iqreg|ir|irf|irf_create|irfm|iri|is_svy|is_svysum|isid|istdize|ivprobit|ivprobit_p|ivreg|ivreg_footnote|ivtob_lf|ivtobit|ivtobit_p|jacknife|jknife|jkstat|joinby|kalarma1|kap|kapmeier|kappa|kapwgt|kdensity|ksm|ksmirnov|ktau|kwallis|labelbook|ladder|levelsof|leverage|lfit|lfit_p|li|lincom|line|linktest|lis|list|lloghet_glf|lloghet_glf_sh|lloghet_gp|lloghet_ilf|lloghet_ilf_sh|lloghet_ip|llogi_sw|llogis_p|llogist|llogistic|llogistichet|lnorm_lf|lnorm_sw|lnorma_p|lnormal|lnormalhet|lnormhet_glf|lnormhet_glf_sh|lnormhet_gp|lnormhet_ilf|lnormhet_ilf_sh|lnormhet_ip|lnskew0|loadingplot|(?<!\\.)log|logi|logis_lf|logistic|logistic_p|logit|logit_estat|logit_p|loglogs|logrank|loneway|lookfor|lookup|lowess|lpredict|lrecomp|lroc|lrtest|ls|lsens|lsens_x|lstat|ltable|ltriang|lv|lvr2plot|m|ma|mac|macr|macro|makecns|man|manova|manovatest|mantel|mark|markin|markout|marksample|mat|mat_capp|mat_order|mat_put_rr|mat_rapp|mata|mata_clear|mata_describe|mata_drop|mata_matdescribe|mata_matsave|mata_matuse|mata_memory|mata_mlib|mata_mosave|mata_rename|mata_which|matalabel|matcproc|matlist|matname|matr|matri|matrix|matrix_input__dlg|matstrik|mcc|mcci|md0_|md1_|md1debug_|md2_|md2debug_|mds|mds_estat|mds_p|mdsconfig|mdslong|mdsmat|mdsshepard|mdytoe|mdytof|me_derd|mean|means|median|memory|memsize|merge|mfp|mfx|mhelp|mhodds|minbound|mixed_ll|mixed_ll_reparm|mkassert|mkdir|mkmat|mkspline|ml|ml_adjs|ml_bhhhs|ml_c_d|ml_check|ml_clear|ml_cnt|ml_debug|ml_defd|ml_e0|ml_e0_bfgs|ml_e0_cycle|ml_e0_dfp|ml_e0i|ml_e1|ml_e1_bfgs|ml_e1_bhhh|ml_e1_cycle|ml_e1_dfp|ml_e2|ml_e2_cycle|ml_ebfg0|ml_ebfr0|ml_ebfr1|ml_ebh0q|ml_ebhh0|ml_ebhr0|ml_ebr0i|ml_ecr0i|ml_edfp0|ml_edfr0|ml_edfr1|ml_edr0i|ml_eds|ml_eer0i|ml_egr0i|ml_elf|ml_elf_bfgs|ml_elf_bhhh|ml_elf_cycle|ml_elf_dfp|ml_elfi|ml_elfs|ml_enr0i|ml_enrr0|ml_erdu0|ml_erdu0_bfgs|ml_erdu0_bhhh|ml_erdu0_bhhhq|ml_erdu0_cycle|ml_erdu0_dfp|ml_erdu0_nrbfgs|ml_exde|ml_footnote|ml_geqnr|ml_grad0|ml_graph|ml_hbhhh|ml_hd0|ml_hold|ml_init|ml_inv|ml_log|ml_max|ml_mlout|ml_mlout_8|ml_model|ml_nb0|ml_opt|ml_p|ml_plot|ml_query|ml_rdgrd|ml_repor|ml_s_e|ml_score|ml_searc|ml_technique|ml_unhold|mleval|mlf_|mlmatbysum|mlmatsum|mlog|mlogi|mlogit|mlogit_footnote|mlogit_p|mlopts|mlsum|mlvecsum|mnl0_|mor|more|mov|move|mprobit|mprobit_lf|mprobit_p|mrdu0_|mrdu1_|mvdecode|mvencode|mvreg|mvreg_estat|nbreg|nbreg_al|nbreg_lf|nbreg_p|nbreg_sw|nestreg|net|newey|newey_p|news|nl|nlcom|nlcom_p|nlexp2|nlexp2a|nlexp3|nlgom3|nlgom4|nlinit|nllog3|nllog4|nlog_rd|nlogit|nlogit_p|nlogitgen|nlogittree|nlpred|nobreak|notes_dlg|nptrend|numlabel|numlist|old_ver|olo|olog|ologi|ologi_sw|ologit|ologit_p|ologitp|on|one|onew|onewa|oneway|op_colnm|op_comp|op_diff|op_inv|op_str|opr|opro|oprob|oprob_sw|oprobi|oprobi_p|oprobit|oprobitp|opts_exclusive|order|orthog|orthpoly|ou|out|outf|outfi|outfil|outfile|outs|outsh|outshe|outshee|outsheet|ovtest|pac|palette|parse_dissim|pause|pca|pca_display|pca_estat|pca_p|pca_rotate|pcamat|pchart|pchi|pcorr|pctile|pentium|pergram|personal|peto_st|pkcollapse|pkcross|pkequiv|pkexamine|pkshape|pksumm|plugin|pnorm|poisgof|poiss_lf|poiss_sw|poisso_p|poisson|poisson_estat|post|postclose|postfile|postutil|pperron|prais|prais_e|prais_e2|prais_p|predict|predictnl|preserve|print|prob|probi|probit|probit_estat|probit_p|proc_time|procoverlay|procrustes|procrustes_estat|procrustes_p|profiler|prop|proportion|prtest|prtesti|pwcorr|pwd|qs|qby|qbys|qchi|qladder|qnorm|qqplot|qreg|qreg_c|qreg_p|qreg_sw|qu|quadchk|quantile|que|quer|query|range|ranksum|ratio|rchart|rcof|recast|recode|reg|reg3|reg3_p|regdw|regr|regre|regre_p2|regres|regres_p|regress|regress_estat|regriv_p|remap|ren|rena|renam|rename|renpfix|repeat|reshape|restore|ret|retu|retur|return|rmdir|robvar|roccomp|rocf_lf|rocfit|rocgold|rocplot|roctab|rologit|rologit_p|rot|rota|rotat|rotate|rotatemat|rreg|rreg_p|ru|run|runtest|rvfplot|rvpplot|safesum|sample|sampsi|savedresults|sc|scatter|scm_mine|sco|scob_lf|scob_p|scobi_sw|scobit|scor|score|scoreplot|scoreplot_help|scree|screeplot|screeplot_help|sdtest|sdtesti|se|search|separate|seperate|serrbar|serset|set|set_defaults|sfrancia|sh|she|shel|shell|shewhart|signestimationsample|signrank|signtest|simul|sktest|sleep|slogit|slogit_d2|slogit_p|smooth|snapspan|so|sor|sort|spearman|spikeplot|spikeplt|spline_x|split|sqreg|sqreg_p|sret|sretu|sretur|sreturn|ssc|st|st_ct|st_hc|st_hcd|st_hcd_sh|st_is|st_issys|st_note|st_promo|st_set|st_show|st_smpl|st_subid|stack|stbase|stci|stcox|stcox_estat|stcox_fr|stcox_fr_ll|stcox_p|stcox_sw|stcoxkm|stcstat|stcurv|stcurve|stdes|stem|stepwise|stfill|stgen|stir|stjoin|stmc|stmh|stphplot|stphtest|stptime|strate|streg|streg_sw|streset|sts|stset|stsplit|stsum|sttocc|sttoct|stvary|su|suest|sum|summ|summa|summar|summari|summariz|summarize|sunflower|sureg|survcurv|survsum|svar|svar_p|svmat|svy_disp|svy_dreg|svy_est|svy_est_7|svy_estat|svy_get|svy_gnbreg_p|svy_head|svy_header|svy_heckman_p|svy_heckprob_p|svy_intreg_p|svy_ivreg_p|svy_logistic_p|svy_logit_p|svy_mlogit_p|svy_nbreg_p|svy_ologit_p|svy_oprobit_p|svy_poisson_p|svy_probit_p|svy_regress_p|svy_sub|svy_sub_7|svy_x|svy_x_7|svy_x_p|svydes|svygen|svygnbreg|svyheckman|svyheckprob|svyintreg|svyintrg|svyivreg|svylc|svylog_p|svylogit|svymarkout|svymean|svymlog|svymlogit|svynbreg|svyolog|svyologit|svyoprob|svyoprobit|svyopts|svypois|svypoisson|svyprobit|svyprobt|svyprop|svyratio|svyreg|svyreg_p|svyregress|svyset|svytab|svytest|svytotal|sw|swilk|symmetry|symmi|symplot|sysdescribe|sysdir|sysuse|szroeter|ta|tab|tab1|tab2|tab_or|tabd|tabdi|tabdis|tabdisp|tabi|table|tabodds|tabstat|tabu|tabul|tabula|tabulat|tabulate|te|tes|test|testnl|testparm|teststd|tetrachoric|time_it|timer|tis|tob|tobi|tobit|tobit_p|tobit_sw|token|tokeni|tokeniz|tokenize|total|translate|translator|transmap|treat_ll|treatr_p|treatreg|trim|trnb_cons|trnb_mean|trpoiss_d2|trunc_ll|truncr_p|truncreg|tsappend|tset|tsfill|tsline|tsline_ex|tsreport|tsrevar|tsrline|tsset|tssmooth|tsunab|ttest|ttesti|tut_chk|tut_wait|tutorial|tw|tware_st|two|twoway|twoway__fpfit_serset|twoway__function_gen|twoway__histogram_gen|twoway__ipoint_serset|twoway__ipoints_serset|twoway__kdensity_gen|twoway__lfit_serset|twoway__normgen_gen|twoway__pci_serset|twoway__qfit_serset|twoway__scatteri_serset|twoway__sunflower_gen|twoway_ksm_serset|ty|typ|type|typeof|unab|unabbrev|unabcmd|update|uselabel|var|var_mkcompanion|var_p|varbasic|varfcast|vargranger|varirf|varirf_add|varirf_cgraph|varirf_create|varirf_ctable|varirf_describe|varirf_dir|varirf_drop|varirf_erase|varirf_graph|varirf_ograph|varirf_rename|varirf_set|varirf_table|varlmar|varnorm|varsoc|varstable|varstable_w|varstable_w2|varwle|vec|vec_fevd|vec_mkphi|vec_p|vec_p_w|vecirf_create|veclmar|veclmar_w|vecnorm|vecnorm_w|vecrank|vecstable|verinst|vers|versi|versio|version|view|viewsource|vif|vwls|wdatetof|webdescribe|webseek|webuse|wh|whelp|whi|which|wilc_st|wilcoxon|win|wind|windo|window|winexec|wntestb|wntestq|xchart|xcorr|xi|xmlsav|xmlsave|xmluse|xpose|xsh|xshe|xshel|xshell|xt_iis|xt_tis|xtab_p|xtabond|xtbin_p|xtclog|xtcloglog|xtcloglog_d2|xtcloglog_pa_p|xtcloglog_re_p|xtcnt_p|xtcorr|xtdata|xtdes|xtfront_p|xtfrontier|xtgee|xtgee_elink|xtgee_estat|xtgee_makeivar|xtgee_p|xtgee_plink|xtgls|xtgls_p|xthaus|xthausman|xtht_p|xthtaylor|xtile|xtint_p|xtintreg|xtintreg_d2|xtintreg_p|xtivreg|xtline|xtline_ex|xtlogit|xtlogit_d2|xtlogit_fe_p|xtlogit_pa_p|xtlogit_re_p|xtmixed|xtmixed_estat|xtmixed_p|xtnb_fe|xtnb_lf|xtnbreg|xtnbreg_pa_p|xtnbreg_refe_p|xtpcse|xtpcse_p|xtpois|xtpoisson|xtpoisson_d2|xtpoisson_pa_p|xtpoisson_refe_p|xtpred|xtprobit|xtprobit_d2|xtprobit_re_p|xtps_fe|xtps_lf|xtps_ren|xtps_ren_8|xtrar_p|xtrc|xtrc_p|xtrchh|xtrefe_p|yx|yxview__barlike_draw|yxview_area_draw|yxview_bar_draw|yxview_dot_draw|yxview_dropline_draw|yxview_function_draw|yxview_iarrow_draw|yxview_ilabels_draw|yxview_normal_draw|yxview_pcarrow_draw|yxview_pcbarrow_draw|yxview_pccapsym_draw|yxview_pcscatter_draw|yxview_pcspike_draw|yxview_rarea_draw|yxview_rbar_draw|yxview_rbarm_draw|yxview_rcap_draw|yxview_rcapsym_draw|yxview_rconnected_draw|yxview_rline_draw|yxview_rscatter_draw|yxview_rspike_draw|yxview_spike_draw|yxview_sunflower_draw|zap_s|zinb|zinb_llf|zinb_plf|zip|zip_llf|zip_p|zip_plf|zt_ct_5|zt_hc_5|zt_hcd_5|zt_is_5|zt_iss_5|zt_sho_5|zt_smp_5|ztnb|ztnb_p|ztp|ztp_p|prtab|prchange|eststo|estout|esttab|estadd|estpost|ivregress|xtreg|xtreg_be|xtreg_fe|xtreg_ml|xtreg_pa_p|xtreg_re|xtregar|xtrere_p|xtset|xtsf_ll|xtsf_llti|xtsum|xttab|xttest0|xttobit|xttobit_p|xttrans)\\b"
      scope: keyword.control.flow.stata
  comments:
    - include: comments-block
    - include: comments-star
    - include: comments-triple-slash
    - include: comments-double-slash
  comments-block:
    - # There could be a * as a glob in a path
      match: "^/\\*|(?<=\\s)/\\*"
      scope: punctuation.definition.comment.begin.stata
      set:
        - meta_scope: comment.block.stata
        - include: docblockr-comment
        - include: comments-block
        - match: "\\*/"
          scope: punctuation.definition.comment.end.stata
          pop: true
  comments-star:
    - match: "^\\s*(\\*)"
      scope: punctuation.definition.comment.stata
      set:
        - meta_scope: comment.line.star.stata
        - include: docblockr-comment
        - include: comments
        - match: "(?=\\n)"
          pop: true
  comments-triple-slash:
    - match: "(///)"
      scope: punctuation.definition.comment.stata
      set:
        - meta_scope: comment.line.triple-slash.stata
        - include: docblockr-comment
        - include: comments
        - match: "(?=\\n)"
          pop: true
  comments-double-slash:
    - match: "(//)"
      scope: punctuation.definition.comment.stata
      set:
        - meta_scope: comment.line.double-slash.stata
        - include: docblockr-comment
        - include: comments
        - match: "(?=\\n)"
          pop: true
  docblockr-comment:
    - match: "(?<!\\w)(@(error|ERROR))\\b"
      captures:
        1: invalid.illegal.name.stata
    - match: "(?<!\\w)(@[A-za-z0-9]+)\\b"
      captures:
        1: keyword.docblockr.stata
  # macro-commands:
  # macro-extended-functions:
  macro-local-escaped:
    - # appropriately color macros that have embedded escaped `,', and $ characters for lazy evaluation
      match: '\\`(?!")'
      scope: punctuation.definition.string.begin.stata
      set:
        - include: macro-local
        - include: macro-global
        - match: "[^\\\\`'\\$\\{\\}]+"
          scope: entity.name.type.class.stata
        - match: "\\\\'|'"
          scope: punctuation.definition.string.end.stata
          pop: true
  macro-local:
    - match: "(`)(=)"
      captures:
        1: punctuation.definition.string.begin.stata
        2: keyword.operator.comparison.stata
      set:
        - match: "'"
          scope: punctuation.definition.string.end.stata
          pop: true
        - include: main
    - match: "(`)(:)"
      captures:
        1: punctuation.definition.string.begin.stata
        2: keyword.operator.comparison.stata
      set:
        - meta_scope: meta.macro-extended-function.stata
        - match: "'"
          scope: punctuation.definition.string.end.stata
          pop: true
        - include: macro-local
        - include: macro-extended-functions
        - include: constants
        - include: string-compound
        - include: string-regular
    - match: '`(?!")'
      scope: punctuation.definition.string.begin.stata
      set:
        - match: "'"
          scope: punctuation.definition.string.end.stata
          pop: true
        - match: "\\+\\+|\\-\\-"
          scope: keyword.operator.arithmetic.stata
        - include: macro-local
        - include: macro-global
        - match: "[^`'\\$\\{\\}]+"
          scope: entity.name.type.class.stata
  macro-global-escaped:
    - match: "(\\\\\\$)(\\\\\\{)?"
      scope: punctuation.definition.string.begin.stata
      set:
        - match: '(\\\})|(?=\"|\s|\n|/|,)'
          captures:
            1: punctuation.definition.string.end.stata
          pop: true
        - include: macro-local
        - include: macro-global
        - match: '[^\\`''\$\{\}\"\s\n/,]+'
          scope: entity.name.type.class.stata
  macro-global:
    - match: "(\\$)(\\{)"
      scope: punctuation.definition.string.begin.stata
      set:
        - match: "\\}"
          scope: punctuation.definition.string.end.stata
          pop: true
        - include: macro-local
        - include: macro-global
        - match: '[^`''\$\{\}\"\s\n/,]+'
          scope: entity.name.type.class.stata
    - match: "\\$"
      scope: punctuation.definition.string.begin.stata
      set:
        - match: '(?=\"|\s|\n|/|,|\$)'
          pop: true
        - include: macro-local
        - include: macro-global
        - match: '[^`''\$\{\}\"\s\n/,]+'
          scope: entity.name.type.class.stata
  constants:
    - match: "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])"
      scope: constant.numeric.float.stata
    - match: "(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))"
      scope: constant.numeric.float.stata
    - match: "\\b(?i:(\\d+e[\\-\\+]?\\d+))"
      scope: constant.numeric.float.stata
    - match: "\\b(\\d+)\\b"
      scope: constant.numeric.integer.decimal.stata
    - match: "(?<![a-zA-Z0-9])(\\.(?![\\./]))(?![a-zA-Z0-9])"
      scope: constant.language.missing.stata
    - match: "\\b_all\\b"
      scope: constant.language.allvars.stata
  operators:
    - match: "\\+\\+|\\-\\-|\\+|\\-|\\*|\\^"
      scope: keyword.operator.arithmetic.stata
      # "++ and -- must come first to support ligatures"
    - # match division operator but not path separator
      match: "(?<![a-zA-Z.])/(?![a-zA-Z.]|$)"
      scope: keyword.operator.arithmetic.stata
    - match: "\\|\\|"
      scope: keyword.operator.graphcombine.stata
    - match: "\\&|\\|"
      scope: keyword.operator.logical.stata
    - match: "(?:<=|>=|:=|==|!=|~=|<|>|=|!!|!)"
      scope: keyword.operator.comparison.stata
    - match: "\\(|\\)"
      scope: keyword.operator.parentheses.stata
    - match: "(##|#)"
      scope: keyword.operator.factor-variables.stata
    - match: "%"
      scope: keyword.operator.format.stata
    - match: ":"
      scope: punctuation.separator.key-value
    - match: "\\["
      scope: punctuation.definition.parameters.begin.stata
    - match: "\\]"
      scope: punctuation.definition.parameters.end.stata
    - match: ","
      scope: punctuation.definition.variable.begin.stata
    - match: ";"
      scope: keyword.operator.delimiter.stata
  string-compound:
    - match: '`"'
      scope: punctuation.definition.string.begin.stata
      set:
        - match: '"''|(?=\n)'
          pop: true
          scope: punctuation.definition.string.end.stata
        - match: '"'
        # 'This must come before #string-regular and #string-compound to accurately color `"""'' in strings'
          scope: string.quoted.double.compound.stata
        - include: string-regular
        - include: string-compound
        - include: macro-local-escaped
        - include: macro-global-escaped
        - include: macro-local
        - include: macro-global
        - meta_scope: string.quoted.double.compound.stata
  string-regular:
    - match: '(?<!`)"'
      scope: punctuation.definition.string.begin.stata
      set:
        - meta_scope: string.quoted.double.stata
        - match: '(")('')?|(?=\n)'
          pop: true
          captures:
            1: punctuation.definition.string.end.stata
            2: invalid.illegal.punctuation.stata
        - include: macro-local-escaped
        - include: macro-global-escaped
        - include: macro-local
        - include: macro-global
  subsetting:
    - # highlight [_n], etc when subsetting variable
      match: "(?<=[0-9a-zA-Z_])(\\[)"
      scope: punctuation.definition.parameters.begin.stata
      set:
        - meta_scope: meta.function.stata
        - match: "(\\])"
          scope: punctuation.definition.parameters.end.stata
        - include: builtin_variables
        - include: operators
        - include: constants
  reserved_names:
    - match: "(_all|_b|byte|_coef|_cons|double|float|if|in|int|long|_n|_N|_pi|_pred|_rc|_skip|str[0-9]+|strL|using|with|[0-9][A-Za-z0-9_]+|[A-Za-z_][A-Za-z0-9_]{32,})(?=/|\\s)"
      scope: invalid.illegal.name.stata
    - match: "[^a-zA-Z0-9_'`\\$\\(\\)\\s]"
      scope: invalid.illegal.name.stata
  illegal_names:
    - match: "\\b(_all|_b|byte|_coef|_cons|double|float|if|in|int|long|_n|_N|_pi|_pred|_rc|_skip|str[0-9]+|strL|using|with|[0-9][A-Za-z0-9_]+|[A-Za-z_][A-Za-z0-9_]{32,})\\b"
      scope: invalid.illegal.name.stata
      # highlights as illegal reserved names and those with more than 32 characters







  ascii-regex-functions:
    - match: \b(regexm)(\()
      captures:
        1: support.function.builtin.stata
        2: punctuation.definition.parameters.begin.stata
      push:
        - match: '(,)\s*(")'
          captures:
            1: punctuation.definition.variable.begin.stata
            2: punctuation.definition.string.begin.stata
          set:
            - match: (")(')?\s*(\))
              captures:
                1: punctuation.definition.string.end.stata
                2: invalid.illegal.punctuation.stata
                3: punctuation.definition.parameters.end.stata
              pop: true
            - include: ascii-regex-internals
        - include: string-compound
        - include: string-regular
        - include: macro-local
        - include: macro-global
        - include: functions
        - match: "[A-Za-z_][A-Za-z0-9_]{0,31}"
          scope: variable.parameter.function.stata
        - include: comments-triple-slash

    # - match: '\b(regexm)(\()'
    #   captures:
    #     1: support.function.builtin.stata
    #     2: punctuation.definition.parameters.begin.stata
    #   push:
    #     - match: '[^,]+'
    #       scope: hello.world.stata
    #     - match: ','
    #       pop: true
  # classes:
  #   - match: '^\s*(class)\b'
  #     captures:
  #       1: storage.type.class.python
  #     push:
  #       - meta_scope: meta.class.python
  #       - include: line-continuation-or-pop
  #       - match: ':'
  #         scope: punctuation.section.class.begin.python
  #         pop: true
  #       - match: "(?={{identifier}})"
  #         push:
  #           - meta_content_scope: entity.name.class.python
  #           - include: entity-name-class
  #           - match: ''
  #             pop: true
  #       - match: \(
  #         scope: punctuation.section.inheritance.begin.python
  #         set:
  #           - meta_scope: meta.class.inheritance.python
  #           - match: \)
  #             scope: punctuation.section.inheritance.end.python
  #             set:
  #               - include: line-continuation-or-pop
  #               - match: ':'
  #                 scope: meta.class.python punctuation.section.class.begin.python
  #                 pop: true
  #               - match: (?=\S)
  #                 pop: true
  #           - match: ':'
  #             scope: invalid.illegal.no-closing-parens.python
  #             pop: true
  #           - match: ','
  #             scope: punctuation.separator.inheritance.python
  #           - include: illegal-names-pop
  #           - match: ({{identifier}}) *(=)
  #             captures:
  #               1: variable.parameter.class-inheritance.python
  #               2: keyword.operator.assignment.python
  #           - match: (?={{path}})
  #             push:
  #               - meta_scope: entity.other.inherited-class.python
  #               - match: '{{identifier}}(?: *(\.) *)?'
  #                 captures:
  #                   1: punctuation.accessor.dot.python
  #               - match: ''
  #                 pop: true
  #           - include: expressions





  ascii-regex-internals:
    - match: "\\^"
      scope: keyword.control.anchor.stata
    - match: "\\$(?![a-zA-Z\\{])"
      scope: keyword.control.anchor.stata
    - match: "[\\?\\+\\*]"
      scope: keyword.control.quantifier.stata
    - match: "\\|"
      scope: keyword.control.or.stata
    - match: "(\\()(?=\\?|\\*|\\+)"
      captures:
        1: keyword.operator.group.stata
      set:
        - meta_scope: invalid.illegal.regexm.stata
        - match: "\\)"
          pop: true
          scope: keyword.operator.group.stata
    - match: "\\("
      scope: keyword.operator.group.stata
      set:
        - include: ascii-regex-internals
        - match: "\\)"
          scope: keyword.operator.group.stata
          pop: true
    - include: ascii-regex-character-class
    - include: macro-local
    - include: macro-global
    - match: "."
      scope: string.quoted.stata
  ascii-regex-character-class:
    - match: "\\\\[\\*\\+\\?\\-\\.\\^\\$\\|\\[\\]\\(\\)\\\\]"
      scope: constant.character.escape.backslash.stata
    - match: "\\."
      scope: constant.character.character-class.stata
    - match: "\\\\."
      scope: illegal.invalid.character-class.stata
    - match: "(\\[)(\\^)?"
      captures:
        1: punctuation.definition.character-class.stata
        2: keyword.operator.negation.stata
      set:
        - meta_scope: constant.other.character-class.set.stata
        - match: "\\]"
          scope: punctuation.definition.character-class.stata
          pop: true
        - include: ascii-regex-character-class
        - match: "((\\\\.)|.)\\-((\\\\.)|[^\\]])"
          captures:
            2: constant.character.escape.backslash.stata
            4: constant.character.escape.backslash.stata






  unicode-regex-internals:
    - match: "\\\\[bBAZzG]|\\^"
      scope: keyword.control.anchor.stata
    - match: "\\$(?![a-zA-Z\\{])"
      scope: keyword.control.anchor.stata
    - match: "\\\\[1-9][0-9]?"
      scope: keyword.other.back-reference.stata
    - match: "[?+*][?+]?|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
      scope: keyword.operator.quantifier.stata
    - match: "\\|"
      scope: keyword.operator.or.stata
    - match: "\\((?!\\?\\#|\\?=|\\?!|\\?<=|\\?<!)"
      scope: keyword.operator.group.stata
      set:
        - meta_scope: keyword.operator.group.stata
        - match: "\\)"
          pop: true
          scope: keyword.operator.group.stata
        - include: unicode-regex-internals
    - match: "\\(\\?\\#"
      scope: comment.block.stata
      set:
        - meta_scope: comment.block.stata
        - match: "\\)"
          pop: true
          scope: comment.block.stata
    - # We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.
      match: "(?<=^|\\s)#\\s[[a-zA-Z0-9,. \\t?!-:][^\\x{00}-\\x{7F}]]*$"
      scope: comment.line.number-sign.stata
    - match: "\\(\\?[iLmsux]+\\)"
      scope: keyword.other.option-toggle.stata
    - match: "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))"
      captures:
        1: keyword.operator.group.stata
        2: punctuation.definition.group.assertion.stata
        3: keyword.assertion.look-ahead.stata
        4: keyword.assertion.negative-look-ahead.stata
        5: keyword.assertion.look-behind.stata
        6: keyword.assertion.negative-look-behind.stata
      set:
        - meta_scope: meta.group.assertion.stata
        - match: "(\\))"
          scope: keyword.operator.group.stata
          pop: true
        - include: unicode-regex-internals
    - match: "(\\()(\\?\\(([1-9][0-9]?|[a-zA-Z_][a-zA-Z_0-9]*)\\))"
      captures:
        1: punctuation.definition.group.stata
        2: punctuation.definition.group.assertion.conditional.stata
        3: entity.name.section.back-reference.stata
      # we can make this more sophisticated to match the | character that separates yes-pattern from no-pattern, but it's not really necessary.
      set:
        - meta_scope: meta.group.assertion.conditional.stata
        - match: "(\\))"
          scope: punctuation.definition.group.stata
          pop: true
        - include: unicode-regex-internals
    - include: unicode-regex-character-class
    - include: macro-local
    - include: macro-global
    - match: "."
      scope: string.quoted.stata
  unicode-regex-character-class:
    - match: "\\\\[wWsSdD]|\\."
      scope: constant.character.character-class.stata
    - match: "\\\\."
      scope: constant.character.escape.backslash.stata
    - match: "(\\[)(\\^)?"
      captures:
        1: punctuation.definition.character-class.stata
        2: keyword.operator.negation.stata
      set:
        - meta_scope: constant.other.character-class.set.stata
        - match: "(\\])"
          pop: true
          scope: punctuation.definition.character-class.stata
        - include: unicode-regex-character-class
        - match: "((\\\\.)|.)\\-((\\\\.)|[^\\]])"
          captures:
            2: constant.character.escape.backslash.stata
            4: constant.character.escape.backslash.stata



